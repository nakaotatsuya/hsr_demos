#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
from sensor_msgs.msg import Image
from jsk_recognition_msgs.msg import LabelArray, RectArray
import math
import message_filters
import cv2
import sys
from cv_bridge import CvBridge, CvBridgeError

class Two2Three():
    def __init__(self):
        #rospy.init_node("two2three")
        self.bridge = CvBridge()
    def get_3d_point(self):
        self.sub_depth = message_filters.Subscriber("/head_rgbd_sensor_remote/depth_registered/image", Image, queue_size=1)
        print("a")
        #self.sub_labelArray = message_filters.Subscriber("/qatm/output/labels", LabelArray, queue_size=1)
        self.sub_rectArray = message_filters.Subscriber("/qatm/output/rects", RectArray, queue_size=1)
        print("b")
        queue_size = rospy.get_param("~queue_size", 100)
        self.subs = [self.sub_depth, self.sub_rectArray]
        print("c")
        if rospy.get_param("~approximate_sync", False):
            slop = rospy.get_param("~slop", 0.1)
            self.sync = message_filters.ApproximateTimeSynchronizer(
                self.subs, queue_size=queue_size, slop=slop)
            print("e")
        else:
            self.sync = message_filters.TimeSynchronizer(
                self.subs, queue_size=queue_size)
            print("f")
        print("d")
        self.sync.registerCallback(self.cb)

        #rospy.Subscriber("/qatm/output/rects", RectArray, self.cb)

    def unsubscribe(self):
        for sub in self.subs:
            sub.unregister()

    def cb(self, msg1):
        self.msg1 = msg1
        print(self.msg1.header)
        #print(msg2)
        #print(msg3)

if __name__ == "__main__":
    rospy.init_node("two2three")
    two2three = Two2Three()
    two2three.get_3d_point()
    rospy.spin()
